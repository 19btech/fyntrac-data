version: '3.8'  # Explicit version for compatibility (healthchecks, resources, networks)

services:
  dataloader:
    image: ghcr.io/19btech/fyntrac/docker/dataloader:0.0.2-SNAPSHOT
    container_name: fyntrac-dataloader
    working_dir: /dataloader
    ports:
      - "8081:8081"
    entrypoint: ["java", "-cp", "/app/resources:/app/classes:/app/libs/*", "com.reserv.dataloader.DataloaderApplication"]
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_PULSAR_CLIENT_SERVICE-URL: pulsar://pulsar:6650
      # Add DB/MongoDB if needed: SPRING_DATA_MONGODB_URI=mongodb://root:R3s3rv%23313@mongodb:27017/master
      # Add Memcached: SPRING_CACHE_TYPE=simple (or caffeine/redis if using Memcached)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]  # Assumes Spring Actuator; adjust if no /actuator
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s  # Java apps take time to boot
    cpus: '1'  # Standalone equivalent of deploy.resources (for single-node)
    mem_limit: 1G
    restart: unless-stopped
    networks:
      - fyntrac-network

  model:
    image: ghcr.io/19btech/fyntrac/docker/model:0.0.2-SNAPSHOT
    container_name: fyntrac-model
    working_dir: /model
    ports:
      - "8082:8082"
    entrypoint: ["java", "-cp", "/app/resources:/app/classes:/app/libs/*", "com.fyntrac.model.ModelApplication"]
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_PULSAR_CLIENT_SERVICE-URL: pulsar://pulsar:6650
      # Add DB/MongoDB if needed: SPRING_DATA_MONGODB_URI=mongodb://root:R3s3rv%23313@mongodb:27017/master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]  # Assumes Spring Actuator
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      dataloader:
        condition: service_healthy  # Waits for dataloader to be healthy
    restart: unless-stopped
    networks:
      - fyntrac-network

  gl:
    image: ghcr.io/19btech/fyntrac/docker/gl:0.0.2-SNAPSHOT
    container_name: fyntrac-gl
    working_dir: /gl
    ports:
      - "8083:8083"
    entrypoint: ["java", "-cp", "/app/resources:/app/classes:/app/libs/*", "com.fyntrac.gl.GlApplication"]
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_PULSAR_CLIENT_SERVICE-URL: pulsar://pulsar:6650
      # Add DB/MongoDB if needed: SPRING_DATA_MONGODB_URI=mongodb://root:R3s3rv%23313@mongodb:27017/master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]  # Assumes Spring Actuator
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      model:
        condition: service_healthy  # Waits for model to be healthy
    restart: unless-stopped
    networks:
      - fyntrac-network

  reporting:
    image: ghcr.io/19btech/fyntrac/docker/reporting:0.0.2-SNAPSHOT
    container_name: fyntrac-reporting
    working_dir: /reporting
    ports:
      - "8084:8084"
    entrypoint: ["java", "-cp", "/app/resources:/app/classes:/app/libs/*", "com.fyntrac.reporting.ReportingApplication"]
    environment:
      SPRING_PROFILES_ACTIVE: test
      # Add Pulsar if needed: SPRING_PULSAR_CLIENT_SERVICE-URL: pulsar://pulsar:6650
      # Add DB/MongoDB if needed: SPRING_DATA_MONGODB_URI=mongodb://root:R3s3rv%23313@mongodb:27017/master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]  # Assumes Spring Actuator
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      gl:
        condition: service_healthy  # Waits for gl to be healthy
    restart: unless-stopped
    networks:
      - fyntrac-network

  web:
    image: ghcr.io/19btech/fyntrac/docker/web:latest
    container_name: fyntrac-web
    ports:
      - "3030:3030"
    # No entrypoint: Assumes image default (e.g., npm start for Node.js web app)
    # environment:  # Omitted if no vars needed; uncomment and add below if required
    #   REACT_APP_API_URL: http://reporting:8084  # Example: Points to reporting service (use service name for internal access)
    #   REACT_APP_PULSAR_URL: pulsar://pulsar:6650  # If web needs Pulsar
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/health"]  # Assumes /health endpoint; adjust to / or port check if none
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s  # Web apps boot faster
    environment:
      NEXT_PUBLIC_SUBLEDGER_SERVICE_URI: http://72.60.172.224:8081/api/dataloader
      NEXT_PUBLIC_REPORTING_SERVICE_URI: http://72.60.172.224:8084/api/reporting
      NEXT_PUBLIC_TENANT: Test
    depends_on:
      reporting:
        condition: service_healthy  # Waits for reporting to be healthy
    restart: unless-stopped
    networks:
      - fyntrac-network

networks:
  fyntrac-network:
    driver: bridge
    external: true  # Connects to existing manually created network (Pulsar/MongoDB/etc.)

# No volumes needed here (add if apps require persistent data, e.g., - app-logs:/app/logs)